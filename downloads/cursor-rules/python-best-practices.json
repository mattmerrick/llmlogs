{
    "name": "Python Best Practices",
    "version": "1.0.0",
    "description": "Optimized rules for Python development including type hints and documentation standards",
    "author": "LLM Logs Community",
    "rules": {
        "python": {
            "type_hints": {
                "require_return_type": true,
                "require_parameter_type": true,
                "allow_any": false
            },
            "documentation": {
                "require_docstring": true,
                "docstring_style": "google",
                "require_module_docstring": true,
                "require_class_docstring": true,
                "require_function_docstring": true
            },
            "formatting": {
                "line_length": 88,
                "use_black": true,
                "sort_imports": true
            },
            "code_quality": {
                "require_tests": true,
                "test_naming_convention": "test_*",
                "max_complexity": 10,
                "max_line_length": 88,
                "max_function_length": 50
            },
            "best_practices": {
                "use_pathlib": true,
                "use_type_annotations": true,
                "use_dataclasses": true,
                "prefer_walrus_operator": true,
                "prefer_f_strings": true
            }
        }
    },
    "prompts": {
        "docstring_generation": "Generate a Google-style docstring for this function including type hints and descriptions for all parameters and return values.",
        "code_review": "Review this Python code for adherence to type hints, documentation standards, and best practices.",
        "test_generation": "Generate unit tests for this Python function using pytest, including edge cases and error conditions."
    }
} 